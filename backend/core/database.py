# core/database.py - VipTon Database Connection
import os
from supabase import create_client, Client
from datetime import datetime
import json
from typing import Dict, List, Optional, Any
import logging

logger = logging.getLogger(__name__)


class VipTonDatabase:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Supabase –¥–ª—è VipTon –ø—Ä–æ–µ–∫—Ç—É"""

    def __init__(self):
        self.url = os.getenv('SUPABASE_URL')
        self.service_key = os.getenv('SUPABASE_SERVICE_KEY')
        self.anon_key = os.getenv('SUPABASE_ANON_KEY')

        if not self.url or not self.service_key:
            raise ValueError("SUPABASE_URL —Ç–∞ SUPABASE_SERVICE_KEY –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ!")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç –∑ service —Ä–æ–ª–ª—é –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
        self.client: Client = create_client(self.url, self.service_key)
        logger.info("‚úÖ VipTon Supabase connection established")

    def table(self, table_name: str):
        """–ü–æ–≤–µ—Ä—Ç–∞—î reference –Ω–∞ —Ç–∞–±–ª–∏—Ü—é"""
        return self.client.table(table_name)

    def get_vip_packages(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ VIP –ø–∞–∫–µ—Ç–∏"""
        try:
            result = self.client.table('vip_packages').select('*').eq('is_active', True).order('level').execute()
            return result.data if result else []
        except Exception as e:
            logger.error(f"‚ùå Error getting VIP packages: {e}")
            return []

    def get_stats(self) -> Dict:
        """–û—Ç—Ä–∏–º—É—î –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            users_table = self.client.table('users')

            # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            total_result = users_table.select('*', count='exact').execute()
            total_users = total_result.count if total_result else 0

            # –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Å—å–æ–≥–æ–¥–Ω—ñ
            today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0).isoformat()
            active_result = users_table.select('*', count='exact').gte('last_login', today_start).execute()
            active_today = active_result.count if active_result else 0

            # VIP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
            vip_result = users_table.select('*', count='exact').gte('vip_until',
                                                                    datetime.utcnow().isoformat()).execute()
            vip_users = vip_result.count if vip_result else 0

            return {
                'total_users': total_users,
                'active_today': active_today,
                'vip_users': vip_users,
                'timestamp': datetime.utcnow().isoformat()
            }
        except Exception as e:
            logger.error(f"‚ùå Error getting stats: {e}")
            return {}


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
vipton_db = None


def init_db(app):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö VipTon"""
    global vipton_db

    try:
        vipton_db = VipTonDatabase()
        logger.info("üéØ VipTon database initialization completed successfully!")

    except Exception as e:
        logger.error(f"üí• VipTon database initialization failed: {e}")
        raise


def get_db() -> VipTonDatabase:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –µ–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑–∏ –¥–∞–Ω–∏—Ö VipTon"""
    global vipton_db
    if vipton_db is None:
        raise RuntimeError("VipTon database not initialized! Call init_db() first.")
    return vipton_db


# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
class VipTonDatabaseHelper:
    """–î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ VipTon –±–∞–∑–æ—é"""

    @staticmethod
    def serialize_for_json(obj):
        """–°–µ—Ä—ñ–∞–ª—ñ–∑—É—î –æ–±'—î–∫—Ç –¥–ª—è JSON"""
        if isinstance(obj, datetime):
            return obj.isoformat()
        elif hasattr(obj, '__dict__'):
            return obj.__dict__
        return obj

    @staticmethod
    def clean_dict(data: Dict) -> Dict:
        """–û—á–∏—â—É—î —Å–ª–æ–≤–Ω–∏–∫ –≤—ñ–¥ None –∑–Ω–∞—á–µ–Ω—å"""
        return {k: v for k, v in data.items() if v is not None}