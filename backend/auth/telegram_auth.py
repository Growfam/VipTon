# auth/telegram_auth.py - VipTon Telegram Web App Authentication
import os
import hmac
import hashlib
import json
from datetime import datetime
from urllib.parse import unquote, parse_qsl
from typing import Tuple, Optional, Dict, Any
import logging

logger = logging.getLogger(__name__)


class VipTonTelegramAuth:
    """–ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ Telegram Web App –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è VipTon"""

    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN not found in environment variables")
        logger.info(f"‚úÖ VipTon Telegram Auth initialized with bot: {os.getenv('BOT_USERNAME', 'unknown')}")

    def verify_init_data(self, init_data: str) -> Tuple[bool, Optional[Dict[str, Any]]]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∞–≤—Ç–µ–Ω—Ç–∏—á–Ω—ñ—Å—Ç—å init_data –≤—ñ–¥ Telegram Web App"""
        try:
            if not init_data:
                logger.error("‚ùå VipTon: Empty init_data")
                return False, None

            # –ü–∞—Ä—Å–∏–º–æ URL-encoded –¥–∞–Ω—ñ
            parsed_data = dict(parse_qsl(init_data, keep_blank_values=True))

            # –í–∏—Ç—è–≥—É—î–º–æ —Ö–µ—à
            received_hash = parsed_data.pop('hash', None)
            if not received_hash:
                logger.error("‚ùå VipTon: No hash found in init_data")
                return False, None

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –∑–≥—ñ–¥–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó Telegram
            secret_key = hmac.new(
                key="WebAppData".encode('utf-8'),
                msg=self.bot_token.encode('utf-8'),
                digestmod=hashlib.sha256
            ).digest()

            # –°—Ç–≤–æ—Ä—é—î–º–æ data-check-string
            data_check_array = []
            for key in sorted(parsed_data.keys()):
                data_check_array.append(f"{key}={parsed_data[key]}")

            data_check_string = '\n'.join(data_check_array)

            # –û–±—á–∏—Å–ª—é—î–º–æ —Ö–µ—à
            calculated_hash = hmac.new(
                key=secret_key,
                msg=data_check_string.encode('utf-8'),
                digestmod=hashlib.sha256
            ).hexdigest()

            # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ö–µ—à—ñ
            is_valid = hmac.compare_digest(received_hash, calculated_hash)

            if not is_valid:
                logger.error(f"‚ùå VipTon: Hash mismatch")
                return False, None

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó
            auth_date = parsed_data.get('auth_date')
            if auth_date:
                try:
                    auth_timestamp = int(auth_date)
                    current_timestamp = int(datetime.utcnow().timestamp())

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –¥–∞–Ω—ñ –Ω–µ —Å—Ç–∞—Ä—à–µ –Ω—ñ–∂ 24 –≥–æ–¥–∏–Ω–∏
                    if current_timestamp - auth_timestamp > 86400:
                        logger.warning("‚ùå VipTon: Init data is too old (>24 hours)")
                        return False, None

                except ValueError:
                    logger.error("‚ùå VipTon: Invalid auth_date format")
                    return False, None

            # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_data = self._extract_user_data(parsed_data)
            if not user_data:
                logger.error("‚ùå VipTon: No valid user data found")
                return False, None

            logger.info(f"‚úÖ VipTon: Telegram auth successful for user: {user_data.get('id')}")
            return True, user_data

        except Exception as e:
            logger.error(f"üí• VipTon: Telegram auth error: {e}")
            return False, None

    def _extract_user_data(self, parsed_data: Dict[str, str]) -> Optional[Dict[str, Any]]:
        """–í–∏—Ç—è–≥—É—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            if 'user' not in parsed_data:
                logger.error("‚ùå VipTon: No 'user' field in parsed data")
                return None

            # –î–µ–∫–æ–¥—É—î–º–æ JSON –∑ user –¥–∞–Ω–∏–º–∏
            user_json = unquote(parsed_data['user'])
            user_data = json.loads(user_json)

            # –í–∞–ª—ñ–¥—É—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
            if 'id' not in user_data:
                logger.error("‚ùå VipTon: No 'id' in user data")
                return None

            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ
            normalized_data = {
                'id': str(user_data['id']),  # –ó–ê–í–ñ–î–ò –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ string
                'first_name': user_data.get('first_name', ''),
                'last_name': user_data.get('last_name', ''),
                'username': user_data.get('username', ''),
                'language_code': user_data.get('language_code', 'en'),
                'is_premium': user_data.get('is_premium', False),
                'photo_url': user_data.get('photo_url', ''),
            }

            # –î–æ–¥–∞—î–º–æ start_param —è–∫—â–æ —î
            if 'start_param' in parsed_data:
                normalized_data['start_param'] = parsed_data['start_param']

            if 'auth_date' in parsed_data:
                normalized_data['auth_date'] = int(parsed_data['auth_date'])

            return normalized_data

        except json.JSONDecodeError as e:
            logger.error(f"‚ùå VipTon: JSON decode error in user data: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå VipTon: Error extracting user data: {e}")
            return None

    def extract_referral_code(self, init_data: str) -> Optional[str]:
        """–í–∏—Ç—è–≥—É—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ –∑ init_data"""
        try:
            parsed_data = dict(parse_qsl(init_data))
            start_param = parsed_data.get('start_param', '')

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ start_param —î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –∫–æ–¥–æ–º
            if start_param and (start_param.startswith('VIP') or len(start_param) >= 6):
                logger.info(f"üîó VipTon: Referral code found: {start_param}")
                return start_param

            return None

        except Exception as e:
            logger.error(f"‚ùå VipTon: Error extracting referral code: {e}")
            return None


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
vipton_telegram_auth = VipTonTelegramAuth()