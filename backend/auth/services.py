# auth/services.py - VipTon Authentication Services
import os
from typing import Dict, Optional, Tuple, Any
from datetime import datetime
from .telegram_auth import vipton_telegram_auth
from .jwt_service import vipton_jwt_service
from .models import VipTonUser
import logging

logger = logging.getLogger(__name__)


class VipTonAuthService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ VipTon"""

    @staticmethod
    def authenticate_telegram_user(init_data: str) -> Tuple[bool, Optional[Dict[str, Any]], Optional[str]]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ Telegram Web App"""
        try:
            logger.info(f"üîê VipTon: Starting Telegram authentication...")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å Telegram
            is_valid, telegram_data = vipton_telegram_auth.verify_init_data(init_data)

            if not is_valid or not telegram_data:
                logger.error("‚ùå VipTon: Invalid Telegram data")
                return False, None, None

            logger.info(f"‚úÖ VipTon: Telegram signature verified for user {telegram_data.get('id')}")

            # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ telegram_id —î string
            telegram_id = telegram_data.get('id')
            if telegram_id is None:
                logger.error("‚ùå VipTon: No telegram ID in auth data")
                return False, None, None

            telegram_id_str = str(telegram_id)

            # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ
            user = VipTonUser.find_by_telegram_id(telegram_id_str)

            if user:
                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                logger.info(f"üë§ VipTon: Existing user found: {user.first_name}")
                user = VipTonAuthService._update_existing_user(user, telegram_data)
            else:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                logger.info(f"üÜï VipTon: Creating new user: {telegram_data.get('first_name', 'Unknown')}")

                referral_code = vipton_telegram_auth.extract_referral_code(init_data)
                user = VipTonUser.create_from_telegram(telegram_data, referral_code)

                # –ë–æ–Ω—É—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if user and referral_code:
                    VipTonAuthService._process_referral_bonus(user, referral_code)

            if not user:
                logger.error("‚ùå VipTon: Failed to create/update user")
                return False, None, None

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞–±–∞–Ω–µ–Ω–∏–π
            if user.is_banned:
                logger.warning(f"üö´ VipTon: Banned user tried to login: {user.telegram_id}")
                return False, None, None

            # –ì–µ–Ω–µ—Ä—É—î–º–æ JWT —Ç–æ–∫–µ–Ω
            jwt_token = vipton_jwt_service.generate_token(
                user_id=user.id,
                additional_claims={
                    'telegram_id': str(user.telegram_id),
                    'is_vip': user.is_vip(),
                    'vip_level': user.vip_level,
                    'is_admin': user.is_admin(),
                    'is_premium': user.is_premium,
                    'service_type': 'VIPTON'
                }
            )

            logger.info(f"üéØ VipTon: Authentication successful for user {user.telegram_id}")

            return True, user.to_dict(), jwt_token

        except Exception as e:
            logger.error(f"üí• VipTon: Authentication error: {e}")
            return False, None, None

    @staticmethod
    def _update_existing_user(user: VipTonUser, telegram_data: Dict[str, Any]) -> VipTonUser:
        """–û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            user.username = telegram_data.get('username', user.username)
            user.first_name = telegram_data.get('first_name', user.first_name)
            user.last_name = telegram_data.get('last_name', user.last_name)
            user.photo_url = telegram_data.get('photo_url', user.photo_url)
            user.language_code = telegram_data.get('language_code', user.language_code)
            user.is_premium = telegram_data.get('is_premium', user.is_premium)

            # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –ª–æ–≥—ñ–Ω—É
            user.last_login = datetime.utcnow()
            user.last_activity = datetime.utcnow()

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if 'login_count' in user.stats:
                user.stats['login_count'] += 1
            else:
                user.stats['login_count'] = 1

            user.save()
            logger.info(f"‚úÖ VipTon: Updated existing user: {user.telegram_id}")
            return user

        except Exception as e:
            logger.error(f"‚ùå VipTon: Error updating existing user: {e}")
            return user

    @staticmethod
    def _process_referral_bonus(user: VipTonUser, referral_code: str) -> bool:
        """–û–±—Ä–æ–±–ª—è—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –±–æ–Ω—É—Å"""
        try:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            referrer = VipTonUser.find_by_referral_code(referral_code)
            if not referrer:
                logger.warning(f"‚ùå VipTon: Referrer not found for code: {referral_code}")
                return False

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            from backend.core.database import get_db
            db = get_db()

            db.table('users').update({
                'total_referrals': referrer.total_referrals + 1
            }).eq('id', referrer.id).execute()

            logger.info(
                f"üéÅ VipTon: Referral processed - Referrer: {referrer.telegram_id}, New user: {user.telegram_id}")
            return True

        except Exception as e:
            logger.error(f"‚ùå VipTon: Error processing referral bonus: {e}")
            return False